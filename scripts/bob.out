==========================================
SLURM_JOB_ID = 919431
SLURM_NODELIST = gnode043
SLURM_JOB_GPUS = 2
==========================================
True
> initializing model parallel with size 1
> initializing ddp with size 1
> initializing pipeline with size 1
Loaded in 9.30 seconds

    tasks = ['Open Curtains', 'Prepare food', 'Serve food', 'Make the bed', 'Water the plants', 'Collect dirty clothes', 'Prepare food', 'Serve food', 'Load dirty clothes', 'Run the washing machine', 'Vacuum the house', 'Dry the clothes', 'Take out the trash', 'Prepare food', 'Serve food', 'Put leftover food in the fridge']
routine_day_1 = {
    '7:00 AM': 'Open Curtains',
    '8:00 AM': 'Prepare food',
    '9:00 AM': 'Serve food',
    '10:00 AM': 'Make the bed',
    '11:00 AM': 'Water the plants',
    '12:00 PM': 'Collect dirty clothes',
    '1:00 PM': 'Prepare food',
    '2:00 PM': 'Serve food',
    '3:00 PM': 'Load dirty clothes',
    '4:00 PM': 'Run the washing machine',
    '5:00 PM': 'Vacuum the house',
    '6:00 PM': 'Dry the clothes',
    '7:00 PM': 'Take out the trash',
    '8:00 PM': 'Prepare food',
    '9:00 PM': 'Serve food',
    '10:00 PM': 'Put leftover food in the fridge'
}

routine_day_2 = {
    '7:00 AM': 'Prepare food',
    '8:00 AM': 'Serve food',
    '9:00 AM': 'Open Curtains',
    '10:00 AM': 'Make the bed',
    '11:00 AM': 'Water the plants',
    '12:00 PM': 'Prepare food',
    '1:00 PM': 'Serve food',
    '2:00 PM': 'Collect dirty clothes',
    '3:00 PM': 'Load dirty clothes',
    '4:00 PM': 'Run the washing machine',
    '5:00 PM': 'Vacuum the house',
    '6:00 PM': 'Dry the clothes',
    '7:00 PM': 'Take out the trash',
    '8:00 PM': 'Prepare food',
    '9:00 PM': 'Serve food',
    '10:00 PM': 'Put leftover food in the fridge'
}
# The anticipated tasks for day 3 are:
routine_day_3 = {
     '7:00 AM': 'Prepare food',
     '8:00 AM': 'Serve food',
     '9:00 AM': 'Open Curtains',
     '10:00 AM': 'Prepare food',
     '11:00 AM': 'Serve food',
     '12:00 PM': 'Prepare food',
     '1:00 PM': 'Serve food',
     '2:00 PM': 'Collect dirty clothes',
     '3:00 PM': 'Load dirty clothes',
     '4:00 PM': 'Run the washing machine',
     '5:00 PM': 'Vacuum the house',
     '6:00 PM': 'Dry the clothes',
     '7:00 PM': 'Take out the trash',
     '8:00 PM': 'Prepare food',
     '9:00 PM': 'Serve food',
     '10:00 PM': 'Put leftover food in the fridge'
}


if __name__ == '__main__':
    print 'The sequence of tasks for day 1 is:',
    print routine_day_1
    print 'The sequence of tasks for day 2 is:',
    print routine_day_2
    print 'The sequence of tasks for day 3 is:',
    print routine_day_3


==================================


    tasks = ['Open Curtains', 'Prepare food', 'Serve food', 'Make the bed', 'Water the plants', 'Collect dirty clothes', 'Prepare food', 'Serve food', 'Load dirty clothes', 'Run the washing machine', 'Vacuum the house', 'Dry the clothes', 'Take out the trash', 'Prepare food', 'Serve food', 'Put leftover food in the fridge']
    # The 3 most likely tasks at 5 PM are:
    likely_tasks = []
    
    for task in tasks:
        # Check whether this task is to be done in the next 5 minutes
        now = datetime.now()
        next_task = False
        for task_time in timetable:
            # Skip tasks which are already done
            if task_time <= now:
                continue
            
            # Check whether this task needs to be done in the next 5 minutes
            if task_time + timedelta(minutes=5) <= now:
                next_task = task
                break
        
        # Check whether this task is likely to be done at 5 PM
        if task in timetable[5] and task not in likely_tasks:
            likely_tasks.append(task)
    
    # Print the results
    print("Open curtains at %d, prepare food at %d, serve food at %d, make the bed at %d, water the plants at %d, collect dirty clothes at %d, prepare food at %d, serve food at %d, load dirty clothes at %d, run the washing machine at %d, vacuum the house at %d, dry the clothes at %d, take out the trash at %d, prepare food at %d, serve food at %d, put leftover food in the fridge at %d" % (timetable[1], timetable[2], timetable[3], timetable[4], timetable[5], timetable[6], timetable[7], timetable[8], timetable[9], timetable[10], timetable[11], timetable[12], timetable[13], timetable[14], timetable[15]))
    print("Most likely tasks at 5 PM are: %s" % ",".join(likely_tasks))




==================================

0
